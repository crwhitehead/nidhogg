"""
Finding data structures for Nidhogg.

This module defines the data structures for findings and alerts
generated by analyzers.
"""

import enum
import json
import time
from dataclasses import asdict, dataclass, field
from typing import Any, Dict, List, Optional, Set


class Severity(enum.Enum):
    """Severity levels for findings."""
    INFO = "info"
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    CRITICAL = "critical"


@dataclass
class Finding:
    """
    A security or code quality finding.
    
    Represents a suspicious or malicious pattern detected
    during analysis.
    """
    rule_id: str
    description: str
    severity: Severity
    details: Dict[str, Any]
    analyzer: str
    timestamp: float = field(default_factory=time.time)
    
    def to_dict(self) -> Dict[str, Any]:
        """
        Convert the finding to a dictionary.
        
        Returns:
            Dictionary representation of the finding
        """
        data = asdict(self)
        data['severity'] = self.severity.value
        return data
    
    def to_json(self) -> str:
        """
        Convert the finding to a JSON string.
        
        Returns:
            JSON string representation of the finding
        """
        return json.dumps(self.to_dict(), indent=2)
    
    @staticmethod
    def from_dict(data: Dict[str, Any]) -> 'Finding':
        """
        Create a finding from a dictionary.
        
        Args:
            data: Dictionary representation of a finding
            
        Returns:
            New Finding instance
        """
        # Convert severity string to enum
        severity_str = data.pop('severity')
        severity = Severity(severity_str)
        
        return Finding(
            severity=severity,
            **data
        )
    
    @staticmethod
    def from_json(json_str: str) -> 'Finding':
        """
        Create a finding from a JSON string.
        
        Args:
            json_str: JSON string representation of a finding
            
        Returns:
            New Finding instance
        """
        data = json.loads(json_str)
        return Finding.from_dict(data)


@dataclass
class AnalysisResults:
    """A collection of findings from an analysis run."""
    findings: List[Finding] = field(default_factory=list)
    start_time: float = field(default_factory=time.time)
    end_time: Optional[float] = None
    target_file: str = ""
    
    def add_finding(self, finding: Finding) -> None:
        """
        Add a finding to the results.
        
        Args:
            finding: Finding to add
        """
        self.findings.append(finding)
    
    def complete(self) -> None:
        """Mark the analysis as complete by setting the end time."""
        self.end_time = time.time()
    
    def to_dict(self) -> Dict[str, Any]:
        """
        Convert the results to a dictionary.
        
        Returns:
            Dictionary representation of the results
        """
        return {
            'target_file': self.target_file,
            'start_time': self.start_time,
            'end_time': self.end_time,
            'duration': self.end_time - self.start_time if self.end_time else None,
            'findings': [finding.to_dict() for finding in self.findings]
        }
    
    def to_json(self) -> str:
        """
        Convert the results to a JSON string.
        
        Returns:
            JSON string representation of the results
        """
        return json.dumps(self.to_dict(), indent=2)