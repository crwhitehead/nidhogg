FROM python:3.8-slim

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    libmagic-dev \
    git \
    && rm -rf /var/lib/apt/lists/*

# Set up working directory
WORKDIR /app

# Copy the Nidhogg source code
COPY nidhogg/ /app/nidhogg/
COPY setup.py /app/
COPY pyproject.toml /app/

# Create a simple debug entrypoint script
RUN echo '#!/bin/bash \n\
echo "Debug container started" \n\
echo "Arguments received: $@" \n\
echo "PACKAGE_FILE=$PACKAGE_FILE" \n\
echo "Contents of /data/input:" \n\
ls -la /data/input \n\
echo "Contents of /app:" \n\
ls -la /app \n\
echo \n\
echo "You can now run commands to debug. For example:" \n\
echo "  python /app/scan_package.py --verbose /data/input/$PACKAGE_FILE" \n\
echo "  ls -la /data/input/$PACKAGE_FILE" \n\
echo "  find /data/input/$PACKAGE_FILE -name \"*.py\" | xargs cat" \n\
echo \n\
echo "To scan a single problematic file with a timeout:" \n\
echo "  python -c \"import signal; import time; signal.alarm(10); from nidhogg.analysis.analyzer import detect_malware; detect_malware([\\\"/data/input/$PACKAGE_FILE/evasive_samples/01_FunctionDef.py\\\"], True)\"" \n\
echo \n\
exec /bin/bash \n\
' > /app/debug_entrypoint.sh && chmod +x /app/debug_entrypoint.sh

# Install Nidhogg and its dependencies
RUN pip install --no-cache-dir python-magic crosshair-tool requests

RUN pip install --no-cache-dir -e .

# Create directories for analysis and results
RUN mkdir -p /data/input /data/output

# Copy the scanning script
COPY scan_package.py /app/
#COPY basic_malware_scan.py /app/

# For debugging we'll use bash
ENTRYPOINT ["/app/debug_entrypoint.sh"]